---
version: 0.2
phases:
  install:
    on-failure: ABORT
    commands:
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - apt-get update && apt-get -y install jq python3-pip python3-dev && pip3 install --upgrade awscli
  
  pre_build:
    on-failure: ABORT
    commands:  
      - $(aws ecr get-login --no-include-email)
      - export KUBECONFIG=$HOME/.kube/config
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
  
  build:
    on-failure: ABORT
    commands:
      - IMAGESHA=$(cat $(ls | grep SHA))
      - APP_NAME=$(cat app_name)
      - cat deployment.yml > $APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e 's@CONTAINER_IMAGE@'"$REPOSITORY_URI"'@' $APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e 's@IMAGESHA@'"$IMAGESHA"'@' $APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e "s@ENV_NAMESPACE@$NAMESPACE@" ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e "s@ENV_CUSTOMER@$CUSTOMER@" ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e "s@ENV_APP_NAME@$APP_NAME@" ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - echo $APP_NAME > app_name
      
  post_build:
    on-failure: ABORT
    commands:
      - kubectl apply -f $APP_NAME-$CUSTOMER-$NAMESPACE.yml
    
    finally:
      ## generate configs for re-use in next phase
      - echo $REPOSITORY_URI > uri
      - echo $IMAGESHA > $APP_NAME-SHA-$NAMESPACE.yml
      - sleep 30
      - kubectl get deployments $APP_NAME -n $CUSTOMER-$NAMESPACE
      
artifacts:
  files:
    - '*$CUSTOMER*'
    - buildspec-deploy.yaml
    - $APP_NAME-SHA-$NAMESPACE.yml
    - deployment.yml
    - uri
    - app_name
