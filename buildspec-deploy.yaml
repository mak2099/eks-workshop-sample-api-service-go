---
version: 0.2
phases:
  install:
    on-failure: ABORT
    commands:
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - apt-get update && apt-get -y install jq python3-pip python3-dev && pip3 install --upgrade awscli

  pre_build:
    on-failure: ABORT
    commands:
      - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - cat deployment.yml > $APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI"'@' $APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - $(aws ecr get-login --no-include-email)
      - export IMAGESHA=$(aws ecr list-images --repository-name $(echo $REPOSITORY_URI | cut -d/ -f2) | jq -r '.imageIds[] | select(.imageTag == '\"$TAG\"') | .imageDigest') 
      #- if [ -z $IMAGESHA ]; then echo "$IMAGESHA is empty so we will build a new image"; else echo "$IMAGESHA already exists -- skip image build"; fi       
      
  build:
    on-failure: ABORT
    commands:
      - |    
        if [ -z $IMAGESHA ]; then
          docker build --tag $REPOSITORY_URI:$TAG .
          docker push $REPOSITORY_URI:$TAG
          unset IMAGESHA
          export IMAGESHA=$(aws ecr list-images --repository-name $(echo $REPOSITORY_URI | cut -d/ -f2) | jq -r '.imageIds[] | select(.imageTag == '\"$TAG\"') | .imageDigest')
          sed -i 's@IMAGESHA@'"$IMAGESHA"'@' $APP_NAME-$CUSTOMER-$NAMESPACE.yml
        else
          echo "$IMAGESHA already exists so skipping build - we still replace tag on the image but with current sha"
          echo $IMAGESHA
          sed -i 's@IMAGESHA@'"$IMAGESHA"'@' $APP_NAME-$CUSTOMER-$NAMESPACE.yml
        fi
        export KUBECONFIG=$HOME/.kube/config
        CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
        export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
        export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
        export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
        export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
        export ENV_SERVER=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME | jq -r '.cluster.endpoint')
        export ENV_CA=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME | jq -r '.cluster.certificateAuthority.data')
        export ENV_CLUSTER_NAME=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME | jq -r '.cluster.arn')
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

  post_build:
    on-failure: ABORT
    commands:
      # magic
      - if [ -z $NAMESPACE ]; then export ENV_NAMESPACE="default" export NAMESPACE="default"; fi && echo $ENV_NAMESPACE, $NAMESPACE
      - sed -i -e "s@ENV_NAMESPACE@$NAMESPACE@" ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e "s@ENV_CUSTOMER@$CUSTOMER@" ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - sed -i -e "s@ENV_APP_NAME@$APP_NAME@" ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - echo $APP_NAME > app_name
      # DEBUG
      - cat ./$APP_NAME-$CUSTOMER-$NAMESPACE.yml
      - kubectl apply -f $APP_NAME-$CUSTOMER-$NAMESPACE.yml
    
    finally:
      - sleep 30
      - kubectl get deployments $APP_NAME -n $CUSTOMER-$NAMESPACE
      - echo "$IMAGESHA" > $APP_NAME-SHA-$NAMESPACE.yml
      - mv buildspec-deb.yml buildspec-deploy.yaml

artifacts:
  files:
    - $APP_NAME-$CUSTOMER-$NAMESPACE.yml 
    - $APP_NAME-SHA-$NAMESPACE.yml
    - buildspec-deploy.yaml
    - deployment.yml
    - app_name
    
  discard-paths: yes
